application {
  config {
    baseName lit,
    applicationType gateway,
    packageName com.ritan.lit.gateway,
    authenticationType jwt,
    prodDatabaseType postgresql,
    clientFramework react,
    buildTool maven,
    serviceDiscoveryType eureka,
    searchEngine elasticsearch,
    testFrameworks [cypress],
    serverPort 8085
  }
  
  entities 
  /* Social */
  Post, Comment, Report, UserReaction,
  Tag, Reply, SocialUser, UserFollowing,
  /* Portfolio */
  Portfolio, Order, Transaction, Dividend,
  StockInfo, PortfolioUser, PortfolioCurrency,
   /* Watcher */
  Company, Stock, StockExchange, 
  Currency, PriceHistory, DividendHistory, 
  StockSplitHistory, CapitalGainHistory, IncomeHistory
}

application {
  config {
    baseName watcher,
    applicationType microservice,
    packageName com.ritan.lit.watchlist,
    authenticationType jwt,
    prodDatabaseType postgresql,
    serviceDiscoveryType eureka,
    searchEngine elasticsearch,
    serverPort 8081
  }
  
  entities Company, Stock, StockExchange, 
  Currency, PriceHistory, DividendHistory, 
  StockSplitHistory, CapitalGainHistory, IncomeHistory
}

application {
  config {
    baseName portfolio,
    applicationType microservice,
    packageName com.ritan.lit.portfolio,
    authenticationType jwt,
    prodDatabaseType postgresql,
    serviceDiscoveryType eureka,
    searchEngine elasticsearch,
    serverPort 8082
  }
    entities Portfolio, Order, Transaction,
    StockInfo, PortfolioUser, PortfolioCurrency,
    Dividend
}

application {
  config {
    baseName social,
    applicationType microservice,
    packageName com.ritan.lit.social,
    authenticationType jwt,
    prodDatabaseType postgresql,
    serviceDiscoveryType eureka,
    searchEngine elasticsearch,
    serverPort 8083
  }
    entities Reply, Comment, Tag, UserReaction,
    Post, Report, SocialUser, UserFollowing
}

enum Gender {
  MALE, FEMALE, OTHER
}

/* SOCIAL */
entity SocialUser {
  user Long required unique,
}

entity UserFollowing {
  stock Long,
}

entity Comment {
  content String required,
  date Instant,
  language LanguageType,
}

entity Tag {
  stockName String,
  ticker String,
}

entity Reply {
  content String required,
  date Instant,
  language LanguageType,
}

entity Post {
  content String required,
  image ImageBlob,
  date Instant,
  language LanguageType,
  isPayedPromotion Boolean,
}

entity Report {
  type RportType,
  description String,
}

entity UserReaction {
  type UserReactionType
}

enum UserReactionType {
  LIT("lit")
  LOVE("love")
  AMUSING("amusing")
  AMAZING("amazing")
  ANGER("anger")
  FEAR("fear")
  SAD("sad")
  BORING("boring")
}

enum LanguageType {
  ENG("english"),
  RO("romanian")
}

enum RportType {
  SPAM("spam")
  NUDITY("nudity")
  DOXING("doxing")
  VIOLENCE("violence")
  TERRORISM("terrorism")
  HATE_SEPACH("hate speach")
  CHILD_ABUSE("child abuse")
  ANIMAL_ABUSE("animal abuse")
  SEXUAL_CONTENT("sexual content")
  PULBIC_SHAMING("public shaming")
  FRAUDULENT_SCHEME("fraudulent scheme")
  FALSE_INFORMATION("false information")
  PROMOTE_ILLEGAL_DRUGS("promote illegal drugs")
  OTHER("other")
}


relationship ManyToOne {
  /* Reports */
  Report{post} to Post{report},
  Report{comment} to Comment{report},
  Report{reply} to Reply{report},
  Report{socialUser} to SocialUser{report},
    
  /* User Content */
  Post{socialUser} to SocialUser{post},
  Comment{socialUser} to SocialUser{comment},
  Reply{socialUser} to SocialUser{reply},
    
  /* Content relations */
  Reply{comment} to Comment{reply},
  Comment{post} to Post{comment},
    
  /* Reactions */
  UserReaction{post} to Post{userReaction},
  UserReaction{socialUser} to SocialUser{userReaction}
}

relationship ManyToMany {
  /* Tags */
  Tag{post} to Post{tag},
  Tag{comment} to Comment{tag},
  Tag{reply} to Reply{tag},
  UserFollowing{socialUser} to SocialUser{userFollowing},
}

/* PORTFOLIO  */
entity PortfolioUser {
  user Long required unique,
}

entity Order {
  quantity Double required,
  sharePrice Double required,
  type OrderType required,
  position PositionType required,
  subbmitedDate Instant,
  filledDate Instant,
  notes String,
  total Double,
  taxes Double,
  stopLoss Double,
  takeProfit Double,
  leverage Integer,
  exchangeRate Double,
  isCFD Boolean,
}

entity Transaction {
  type TransactionType,
  value Double,
  date Instant,
}

entity Portfolio {
  name String,
  value Double,
  image ImageBlob,
  unrealisedValue Double,
  /** Only on closed positions */
  profitOrLoss Double,
}

entity StockInfo {
  ticker String,
  name String,
  image ImageBlob,
  isin String,
  dividendYield Double,
  sector String,
  industry String,
}

entity Dividend  {
  dateRecived Instant,
  taxRate Integer,
  totalRecived Double,
  dividendType DividendType,
}

enum PositionType {
  OPEN("open"),
  CLOSED("closed")
}
enum OrderType {
  BUY("buy"),
  SELL("sell")
}

enum TransactionType {
  DEPOSIT("deposit"),
  WITHDRAW("withdraw")
}

enum DividendType {
  PROPERTY_INCOME("property income"),
  ORDINARY("ordinary")
}

entity PortfolioCurrency {
  code String, //USD
  name String, //US Dollar
  currencySymbol String, //$
}

relationship ManyToOne {
  Order{stockInfo} to StockInfo{order},
  Order{portfolio} to Portfolio{order},
  Transaction{portfolio} to Portfolio{transaction},
  Portfolio{portfolioUser} to PortfolioUser{portfolio}
  Portfolio{portfolioCurrency} to PortfolioCurrency{portfolio},
  Dividend{order} to Order{dividend},
}

/* WATCH LIST */ 
/* General data */
entity StockExchange {
  name String, //New York Stock Exchange
  symbol String, //NYSE
  country String,
}

enum StockType {
  COMMON("common"),
  PREFERRED("preferred")
}

entity Currency {
  code String, //USD
  name String, //US Dollar
  currencySymbol String, //$
}

entity Stock {
  ticker String, //MAIN
  name String,
  image ImageBlob,
  marketCap String,
  volume Integer,
  peRation Double,
  ipoDate LocalDate,
  isin String,
  isDelisted Boolean,
  hasDividend Boolean,
  type StockType,
  dividendYield Double,
}

entity Company {
  name String,
  image ImageBlob,
  description String,
  employees Long,
  sector String,
  industry String,
  ceo String,
  site String,
  dateOfEstablishment LocalDate
}

/* Historical Data */
entity PriceHistory {
 date LocalDate,
 open Double,
 high Double,
 low Double,
 close Double,
 adjClose Double,
 volume Double
}

entity DividendHistory {
  date LocalDate,
  dividend Double,
}

entity StockSplitHistory{
  date LocalDate,
  ratio Double
}

entity CapitalGainHistory {
  date LocalDate,
  capitalGain Double,
}

/* Financials */
entity IncomeHistory {
  date LocalDate,
  totalRevenue Long,
  costOfRevenue Long,
  grossProfit Long,
  operatingExpense Long,
  operatingIncome Long,
}

/* Relationships */
relationship ManyToOne {
  Stock{stockExchange} to StockExchange{stock},
  /* Historical Data */
  PriceHistory{stock} to Stock{priceHistory},
  DividendHistory{stock} to Stock{dividendHistory},
  StockSplitHistory{stock} to Stock{stockSplitHistory},
  CapitalGainHistory{stock} to Stock{capitalGainHistory},
  IncomeHistory{stock} to Stock{incomeHistory},
  Stock{company} to Company{stock},
  Stock{currency} to Currency{stock}
}

microservice Company, Stock, StockExchange, Currency, PriceHistory, DividendHistory, StockSplitHistory, CapitalGainHistory, IncomeHistory with watcher
microservice Portfolio, Transaction, Order, StockInfo, PortfolioUser, PortfolioCurrency, Dividend with portfolio
microservice Post, Comment, Reply, Report, Tag, SocialUser, UserFollowing, UserReaction with social

paginate PriceHistory, DividendHistory, StockSplitHistory, CapitalGainHistory, IncomeHistory with pagination
paginate Portfolio, Transaction, Order, Dividend with pagination
paginate Post, Comment, Reply, UserReaction with infinite-scroll

service 
  /* Social */
  Post, Comment, Report, UserReaction,
  Tag, Reply, SocialUser, UserFollowing,
  /* Portfolio */
  Portfolio, Order, Transaction, 
  StockInfo, PortfolioUser, PortfolioCurrency,
  Dividend,
   /* Watcher */
  Company, Stock, StockExchange, 
  Currency, PriceHistory, DividendHistory, 
  StockSplitHistory, CapitalGainHistory, IncomeHistory
with serviceClass

search  
  /* Social */
  Post, Comment, Report, UserReaction,
  Tag, Reply, SocialUser, UserFollowing,
  /* Portfolio */
  Portfolio, Order, Transaction, 
  StockInfo, PortfolioUser, PortfolioCurrency,
  Dividend,
   /* Watcher */
  Company, Stock, StockExchange, 
  Currency, PriceHistory, DividendHistory, 
  StockSplitHistory, CapitalGainHistory, IncomeHistory 
with elasticsearch

/* Deployment options */
//deployment {
//  deploymentType docker-compose
//  dockerRepositoryName "litDocker"
//  appsFolders [lit, portfolio, social, watcher]
//}
//
//deployment {
//  deploymentType kubernetes
//  dockerRepositoryName "litKubernetes"
//  appsFolders [lit, portfolio, social, watcher]
//}
